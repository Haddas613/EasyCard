<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BankAccountRequiredForKYC" xml:space="preserve">
    <value>Bank account is required for KYC approval</value>
  </data>
  <data name="BillingReportAlreadyPayed" xml:space="preserve">
    <value>Billing report already payed</value>
  </data>
  <data name="BillingReportUpdated" xml:space="preserve">
    <value>Billing report updated</value>
  </data>
  <data name="BirthdayInvalid" xml:space="preserve">
    <value>Birthday date is invalid</value>
  </data>
  <data name="CannotLockAccount" xml:space="preserve">
    <value>Merchant's account cannot be locked</value>
  </data>
  <data name="CannotResetPassowrd" xml:space="preserve">
    <value>Merchant's account password cannot be reseted</value>
  </data>
  <data name="CannotSendInvitation" xml:space="preserve">
    <value>Cannot send invitation</value>
  </data>
  <data name="CannotUnlockAccount" xml:space="preserve">
    <value>Merchant's account cannot be unlocked</value>
  </data>
  <data name="ChargebackAmountIsInvalid" xml:space="preserve">
    <value>Chargeback amount is invalid</value>
  </data>
  <data name="ChargebackCreated" xml:space="preserve">
    <value>Chargeback request created</value>
  </data>
  <data name="ChargebackDone" xml:space="preserve">
    <value>Chargeback request done</value>
  </data>
  <data name="ChargebackFailed" xml:space="preserve">
    <value>Chargeback request failed</value>
  </data>
  <data name="CollateralLimitChanged" xml:space="preserve">
    <value>Collateral Limit changed</value>
  </data>
  <data name="ComissionRatesChanged" xml:space="preserve">
    <value>Comission rates changed</value>
  </data>
  <data name="ComissionRatesFailed" xml:space="preserve">
    <value>Failed to change comission rates</value>
  </data>
  <data name="CreditCardCannotBeCharged" xml:space="preserve">
    <value>Credit card cannot be charged</value>
  </data>
  <data name="CreditCardTokenFailed" xml:space="preserve">
    <value>Credit card token obtaining failed</value>
  </data>
  <data name="CreditCardTokenObtained" xml:space="preserve">
    <value>Credit Card Token Obtained</value>
  </data>
  <data name="DocumentDeleted" xml:space="preserve">
    <value>Document deleted</value>
  </data>
  <data name="DocumentDoesNotExist" xml:space="preserve">
    <value>Document does not exist</value>
  </data>
  <data name="DocumentUpdated" xml:space="preserve">
    <value>Document updated</value>
  </data>
  <data name="DocumentUploaded" xml:space="preserve">
    <value>Document uploaded</value>
  </data>
  <data name="EmailChangingIsDisabled" xml:space="preserve">
    <value>Email changing disabled</value>
  </data>
  <data name="IdentityDetaildsUpdated" xml:space="preserve">
    <value>Identity detailds updated</value>
  </data>
  <data name="InitialTransactionDoesNotExist" xml:space="preserve">
    <value>Initial Transaction Does Not Exist</value>
  </data>
  <data name="InvalidPaymentGatewayID" xml:space="preserve">
    <value>Invalid Payment Gateway ID provided</value>
  </data>
  <data name="InvitationSentTo" xml:space="preserve">
    <value>Invitation sent to {email}</value>
  </data>
  <data name="J5BlockFailed" xml:space="preserve">
    <value>J5 block failed</value>
  </data>
  <data name="KYCApproved" xml:space="preserve">
    <value>Merchant's KYC information has been approved</value>
  </data>
  <data name="KYCRejected" xml:space="preserve">
    <value>Merchant's KYC information has been rejected</value>
  </data>
  <data name="KYCStatusReseted" xml:space="preserve">
    <value>Merchant's KYC Status reseted because one of required documents is not present or not approved</value>
  </data>
  <data name="LimitsUpdated" xml:space="preserve">
    <value>Limits updated</value>
  </data>
  <data name="ManualTransactionAlreadyCreated" xml:space="preserve">
    <value>Manual Transaction Already Created</value>
  </data>
  <data name="MerchantAccountLocked" xml:space="preserve">
    <value>Merchant's account locked</value>
  </data>
  <data name="MerchantAccountUnLocked" xml:space="preserve">
    <value>Merchant's account unlocked</value>
  </data>
  <data name="MerchantCreated" xml:space="preserve">
    <value>Merchant created</value>
  </data>
  <data name="MerchantDeclaredChanged" xml:space="preserve">
    <value>Declared values changed</value>
  </data>
  <data name="MerchantDoesNotExist" xml:space="preserve">
    <value>Merchant does not exist</value>
  </data>
  <data name="MerchantlNotUniqueueFields" xml:space="preserve">
    <value>Merchant with "{0}" already exists</value>
  </data>
  <data name="MerchantlNotUniqueueHistoryFields" xml:space="preserve">
    <value>Merchant fields "{0}" already in use</value>
  </data>
  <data name="MerchantUpdated" xml:space="preserve">
    <value>Merchant updated</value>
  </data>
  <data name="NeedToRegisterCreditCardFirst" xml:space="preserve">
    <value>You need to register credit card first</value>
  </data>
  <data name="NextKYCDocumentTypesNeedBeApproved" xml:space="preserve">
    <value>Next KYC document types need to be approved</value>
  </data>
  <data name="NikionChanged" xml:space="preserve">
    <value>Nikion Changed</value>
  </data>
  <data name="NikionRatesChanged" xml:space="preserve">
    <value>Nilion Rates Changed</value>
  </data>
  <data name="NikionRatesRecalculation" xml:space="preserve">
    <value>{0} transactions nikion rates recalculated</value>
  </data>
  <data name="NikionRatesRecalculationTo" xml:space="preserve">
    <value>{0} transactions nikion rates recalculated to {1}</value>
  </data>
  <data name="PasswordReseted" xml:space="preserve">
    <value>Merchant's account {email} password reseted</value>
  </data>
  <data name="RatesAddedFromSystemSettings" xml:space="preserve">
    <value>Rates Added From System Settings</value>
  </data>
  <data name="RatesRecalculation" xml:space="preserve">
    <value>{0} transactions rates recalculated</value>
  </data>
  <data name="RatesRecalculationTo" xml:space="preserve">
    <value>{0} transactions rates recalculated to {1}</value>
  </data>
  <data name="RejectionUndone" xml:space="preserve">
    <value>Transaction rejection undone</value>
  </data>
  <data name="SecurityJ5BlockApplied" xml:space="preserve">
    <value>Security J5 limit applied</value>
  </data>
  <data name="SecurityJ5BlockFailed" xml:space="preserve">
    <value>Failed to apply security J5 limit</value>
  </data>
  <data name="TerminalAdded" xml:space="preserve">
    <value>Terminal record added. Please review rates and declared values.</value>
  </data>
  <data name="TerminalCanotBeAdedToTerminal" xml:space="preserve">
    <value>Terminal cannot be added to another terminal</value>
  </data>
  <data name="TotalAmountWrong" xml:space="preserve">
    <value>TotalAmount does not equal to amounth calculation</value>
  </data>
  <data name="TransactionCannotBeChargedBack" xml:space="preserve">
    <value>Chargeback cannot be created for given transaction</value>
  </data>
  <data name="TransactionCommitted" xml:space="preserve">
    <value>Transaction committed</value>
  </data>
  <data name="TransactionCreated" xml:space="preserve">
    <value>Transaction created</value>
  </data>
  <data name="TransactionDoesNotExist" xml:space="preserve">
    <value>Transaction does not exist</value>
  </data>
  <data name="TransactionHolded" xml:space="preserve">
    <value>Transaction(s) Holded</value>
  </data>
  <data name="TransactionIsNotAllowedToModify" xml:space="preserve">
    <value>Transaction is tot allowed to modify</value>
  </data>
  <data name="TransactionRejected" xml:space="preserve">
    <value>Transaction Rejected</value>
  </data>
  <data name="TransactionUnHolded" xml:space="preserve">
    <value>Transaction(s) Unholded</value>
  </data>
  <data name="UserCreated" xml:space="preserve">
    <value>User creted and Identity detailds updated</value>
  </data>
  <data name="ValidationErrors" xml:space="preserve">
    <value>Required fields missing or provided invalid values</value>
  </data>
</root>