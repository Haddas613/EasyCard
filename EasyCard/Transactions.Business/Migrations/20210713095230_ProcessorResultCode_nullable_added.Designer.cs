// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Transactions.Business.Data;

namespace Transactions.Business.Migrations
{
    [DbContext(typeof(TransactionsContext))]
    [Migration("20210713095230_ProcessorResultCode_nullable_added")]
    partial class ProcessorResultCode_nullable_added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Transactions.Business.Entities.BillingDeal", b =>
                {
                    b.Property<Guid>("BillingDealID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("BillingDealTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("BillingSchedule")
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BillingSchedule");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("CreditCardToken")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreditCardToken");

                    b.Property<short>("Currency")
                        .HasColumnType("smallint");

                    b.Property<int?>("CurrentDeal")
                        .HasColumnType("int");

                    b.Property<Guid?>("CurrentTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CurrentTransactionTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<short>("DocumentOrigin")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("InitialTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IssueInvoice")
                        .HasColumnType("bit");

                    b.Property<Guid>("MerchantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("NetTotal")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime?>("NextScheduledTransaction")
                        .HasColumnType("date");

                    b.Property<string>("OperationDoneBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("OperationDoneByID")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PausedFrom")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PausedTo")
                        .HasColumnType("date");

                    b.Property<string>("SourceIP")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("TerminalID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<byte[]>("UpdateTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("VATRate")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("VATTotal")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("BillingDealID");

                    b.ToTable("BillingDeal");
                });

            modelBuilder.Entity("Transactions.Business.Entities.BillingDealHistory", b =>
                {
                    b.Property<Guid>("BillingDealHistoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BillingDealID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("OperationCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("OperationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("OperationDescription")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationDoneBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("OperationDoneByID")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OperationMessage")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SourceIP")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("BillingDealHistoryID");

                    b.HasIndex("BillingDealID");

                    b.ToTable("BillingDealHistory");
                });

            modelBuilder.Entity("Transactions.Business.Entities.CreditCardTokenDetails", b =>
                {
                    b.Property<Guid>("CreditCardTokenID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CardBrand")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CardExpiration")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CardOwnerName")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardOwnerNationalID")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CardVendor")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ConsumerEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("ConsumerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<short>("DocumentOrigin")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("InitialTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MerchantID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OperationDoneBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("OperationDoneByID")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceIP")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("TerminalID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CreditCardTokenID");

                    b.ToTable("CreditCardTokenDetails");
                });

            modelBuilder.Entity("Transactions.Business.Entities.FutureBilling", b =>
                {
                    b.Property<Guid>("BillingDealID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CurrentDeal")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BillingDealTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FutureBilling_CardNumber");

                    b.Property<string>("CardOwnerName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FutureBilling_CardOwnerName");

                    b.Property<short>("Currency")
                        .HasColumnType("smallint");

                    b.Property<int?>("FutureDeal")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FutureScheduledTransaction")
                        .HasColumnType("datetime2")
                        .HasColumnName("FutureScheduledTransaction");

                    b.Property<Guid>("MerchantID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MerchantID");

                    b.Property<DateTime?>("NextScheduledTransaction")
                        .HasColumnType("datetime2")
                        .HasColumnName("NextScheduledTransaction");

                    b.Property<DateTime?>("PausedFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("PausedFrom");

                    b.Property<DateTime?>("PausedTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("PausedTo");

                    b.Property<Guid>("TerminalID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TerminalID");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("TransactionAmount");

                    b.HasKey("BillingDealID", "CurrentDeal");

                    b.ToTable("vFutureBillings", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Transactions.Business.Entities.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardOwnerName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CardOwnerName");

                    b.Property<string>("CardOwnerNationalID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CardOwnerNationalID");

                    b.Property<string>("CopyDonwnloadUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("Currency")
                        .HasColumnType("smallint");

                    b.Property<short>("DocumentOrigin")
                        .HasColumnType("smallint");

                    b.Property<string>("DownloadUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal>("InitialPaymentAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("InstallmentPaymentAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("InvoiceNumber");

                    b.Property<DateTime?>("InvoiceTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<long?>("InvoicingID")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MerchantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("NetTotal")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("NumberOfPayments")
                        .HasColumnType("int");

                    b.Property<string>("OperationDoneBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("OperationDoneByID")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceIP")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TerminalID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<byte[]>("UpdateTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("VATRate")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("VATTotal")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("InvoiceID");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("Transactions.Business.Entities.PaymentRequest", b =>
                {
                    b.Property<Guid>("PaymentRequestID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowPinPad")
                        .HasColumnType("bit");

                    b.Property<string>("CardOwnerName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CardOwnerName");

                    b.Property<string>("CardOwnerNationalID")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CardOwnerNationalID");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("Currency")
                        .HasColumnType("smallint");

                    b.Property<short>("DocumentOrigin")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromAddress")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("InitialPaymentAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("InstallmentPaymentAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<bool>("IssueInvoice")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MerchantID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("NetTotal")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("NumberOfPayments")
                        .HasColumnType("int");

                    b.Property<string>("OperationDoneBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("OperationDoneByID")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PaymentRequestAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime?>("PaymentRequestTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PaymentTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestSubject")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SourceIP")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("TerminalID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<byte[]>("UpdateTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("VATRate")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("VATTotal")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("PaymentRequestID");

                    b.ToTable("PaymentRequest");
                });

            modelBuilder.Entity("Transactions.Business.Entities.PaymentRequestHistory", b =>
                {
                    b.Property<Guid>("PaymentRequestHistoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("OperationCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("OperationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("OperationDescription")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationDoneBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("OperationDoneByID")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OperationMessage")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("PaymentRequestID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceIP")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PaymentRequestHistoryID");

                    b.HasIndex("PaymentRequestID");

                    b.ToTable("PaymentRequestHistory");
                });

            modelBuilder.Entity("Transactions.Business.Entities.PaymentTransaction", b =>
                {
                    b.Property<Guid>("PaymentTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("AggregatorID")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("BillingDealID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("CardPresence")
                        .HasColumnType("smallint");

                    b.Property<string>("ConsumerIP")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("ConsumerIP");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("CreditCardToken")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreditCardToken");

                    b.Property<short>("Currency")
                        .HasColumnType("smallint");

                    b.Property<int?>("CurrentDeal")
                        .HasColumnType("int");

                    b.Property<short>("DocumentOrigin")
                        .HasColumnType("smallint");

                    b.Property<short?>("FinalizationStatus")
                        .HasColumnType("smallint");

                    b.Property<decimal>("InitialPaymentAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<Guid?>("InitialTransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("InstallmentPaymentAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<Guid?>("InvoiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("InvoicingID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IssueInvoice")
                        .HasColumnType("bit");

                    b.Property<short>("JDealType")
                        .HasColumnType("smallint");

                    b.Property<long?>("MarketerID")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MerchantID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MerchantIP")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("MerchantIP");

                    b.Property<decimal>("NetTotal")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("NumberOfPayments")
                        .HasColumnType("int");

                    b.Property<Guid?>("PaymentRequestID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("PaymentTypeEnum")
                        .HasColumnType("smallint");

                    b.Property<string>("PinPadTransactionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProcessorID")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProcessorResultCode")
                        .HasColumnType("int");

                    b.Property<string>("RejectionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("RejectionReason")
                        .HasColumnType("smallint");

                    b.Property<short>("SpecialTransactionType")
                        .HasColumnType("smallint");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TerminalID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("TerminalTemplateID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime?>("TransactionDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<DateTime?>("TransactionTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<short>("TransactionType")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("UpdateTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("VATRate")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("VATTotal")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("PaymentTransactionID");

                    b.ToTable("PaymentTransaction");
                });

            modelBuilder.Entity("Transactions.Business.Entities.TransactionHistory", b =>
                {
                    b.Property<Guid>("TransactionHistoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("OperationCode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("OperationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("OperationDescription")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationDoneBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("OperationDoneByID")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OperationMessage")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("PaymentTransactionID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceIP")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TransactionHistoryID");

                    b.HasIndex("PaymentTransactionID");

                    b.ToTable("TransactionHistory");
                });

            modelBuilder.Entity("Transactions.Business.Entities.BillingDeal", b =>
                {
                    b.OwnsOne("Shared.Integration.Models.Invoicing.InvoiceDetails", "InvoiceDetails", b1 =>
                        {
                            b1.Property<Guid>("BillingDealID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("InvoiceSubject")
                                .HasMaxLength(250)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(250)")
                                .HasColumnName("InvoiceSubject");

                            b1.Property<short>("InvoiceType")
                                .HasColumnType("smallint")
                                .HasColumnName("InvoiceType");

                            b1.Property<string>("SendCCTo")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SendCCTo");

                            b1.HasKey("BillingDealID");

                            b1.ToTable("BillingDeal");

                            b1.WithOwner()
                                .HasForeignKey("BillingDealID");
                        });

                    b.OwnsOne("Transactions.Business.Entities.CreditCardDetails", "CreditCardDetails", b1 =>
                        {
                            b1.Property<Guid>("BillingDealID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CardBin")
                                .HasMaxLength(10)
                                .IsUnicode(false)
                                .HasColumnType("varchar(10)")
                                .HasColumnName("CardBin");

                            b1.Property<string>("CardBrand")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("CardBrand");

                            b1.Property<string>("CardExpiration")
                                .HasMaxLength(5)
                                .IsUnicode(false)
                                .HasColumnType("varchar(5)")
                                .HasColumnName("CardExpiration");

                            b1.Property<string>("CardNumber")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("CardNumber");

                            b1.Property<string>("CardOwnerName")
                                .HasMaxLength(100)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("CardOwnerName");

                            b1.Property<string>("CardOwnerNationalID")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("CardOwnerNationalID");

                            b1.Property<string>("CardVendor")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("CardVendor");

                            b1.HasKey("BillingDealID");

                            b1.ToTable("BillingDeal");

                            b1.WithOwner()
                                .HasForeignKey("BillingDealID");
                        });

                    b.OwnsOne("Transactions.Business.Entities.DealDetails", "DealDetails", b1 =>
                        {
                            b1.Property<Guid>("BillingDealID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ConsumerAddress")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CustomerAddress");

                            b1.Property<string>("ConsumerEmail")
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("ConsumerEmail");

                            b1.Property<Guid?>("ConsumerID")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ConsumerID");

                            b1.Property<string>("ConsumerPhone")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("ConsumerPhone");

                            b1.Property<string>("DealDescription")
                                .HasMaxLength(500)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DealDescription");

                            b1.Property<string>("DealReference")
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("DealReference");

                            b1.Property<string>("Items")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Items");

                            b1.HasKey("BillingDealID");

                            b1.ToTable("BillingDeal");

                            b1.WithOwner()
                                .HasForeignKey("BillingDealID");
                        });

                    b.Navigation("CreditCardDetails");

                    b.Navigation("DealDetails");

                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Transactions.Business.Entities.BillingDealHistory", b =>
                {
                    b.HasOne("Transactions.Business.Entities.BillingDeal", "BillingDeal")
                        .WithMany()
                        .HasForeignKey("BillingDealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingDeal");
                });

            modelBuilder.Entity("Transactions.Business.Entities.CreditCardTokenDetails", b =>
                {
                    b.OwnsOne("Transactions.Business.Entities.ShvaInitialTransactionDetails", "ShvaInitialTransactionDetails", b1 =>
                        {
                            b1.Property<Guid>("CreditCardTokenDetailsCreditCardTokenID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AuthNum")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("AuthNum");

                            b1.Property<string>("AuthSolekNum")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("AuthSolekNum");

                            b1.Property<string>("ShvaDealID")
                                .HasMaxLength(30)
                                .IsUnicode(false)
                                .HasColumnType("varchar(30)")
                                .HasColumnName("ShvaDealID");

                            b1.Property<DateTime?>("ShvaTransactionDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("ShvaTransactionDate");

                            b1.HasKey("CreditCardTokenDetailsCreditCardTokenID");

                            b1.ToTable("CreditCardTokenDetails");

                            b1.WithOwner()
                                .HasForeignKey("CreditCardTokenDetailsCreditCardTokenID");
                        });

                    b.Navigation("ShvaInitialTransactionDetails");
                });

            modelBuilder.Entity("Transactions.Business.Entities.FutureBilling", b =>
                {
                    b.OwnsOne("Transactions.Business.Entities.CreditCardDetails", "CreditCardDetails", b1 =>
                        {
                            b1.Property<Guid>("FutureBillingBillingDealID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("FutureBillingCurrentDeal")
                                .HasColumnType("int");

                            b1.Property<string>("CardExpiration")
                                .HasMaxLength(5)
                                .IsUnicode(false)
                                .HasColumnType("varchar(5)")
                                .HasColumnName("CardExpiration");

                            b1.Property<string>("CardNumber")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("CardNumber");

                            b1.Property<string>("CardOwnerName")
                                .HasMaxLength(100)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("CardOwnerName");

                            b1.HasKey("FutureBillingBillingDealID", "FutureBillingCurrentDeal");

                            b1.ToTable("vFutureBillings");

                            b1.WithOwner()
                                .HasForeignKey("FutureBillingBillingDealID", "FutureBillingCurrentDeal");
                        });

                    b.Navigation("CreditCardDetails");
                });

            modelBuilder.Entity("Transactions.Business.Entities.Invoice", b =>
                {
                    b.OwnsOne("Shared.Integration.Models.Invoicing.InvoiceDetails", "InvoiceDetails", b1 =>
                        {
                            b1.Property<Guid>("InvoiceID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("InvoiceSubject")
                                .HasMaxLength(250)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(250)")
                                .HasColumnName("InvoiceSubject");

                            b1.Property<short>("InvoiceType")
                                .HasColumnType("smallint")
                                .HasColumnName("InvoiceType");

                            b1.Property<string>("SendCCTo")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SendCCTo");

                            b1.HasKey("InvoiceID");

                            b1.ToTable("Invoice");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceID");
                        });

                    b.OwnsOne("Transactions.Business.Entities.CreditCardDetails", "CreditCardDetails", b1 =>
                        {
                            b1.Property<Guid>("InvoiceID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CardBrand")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("CardBrand");

                            b1.Property<string>("CardExpiration")
                                .HasMaxLength(5)
                                .IsUnicode(false)
                                .HasColumnType("varchar(5)")
                                .HasColumnName("CardExpiration");

                            b1.Property<string>("CardNumber")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("CardNumber");

                            b1.Property<string>("CardOwnerName")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(100)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("CardOwnerName");

                            b1.Property<string>("CardOwnerNationalID")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("CardOwnerNationalID");

                            b1.Property<string>("CardVendor")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("CardVendor");

                            b1.HasKey("InvoiceID");

                            b1.ToTable("Invoice");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceID");
                        });

                    b.OwnsOne("Transactions.Business.Entities.DealDetails", "DealDetails", b1 =>
                        {
                            b1.Property<Guid>("InvoiceID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ConsumerAddress")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CustomerAddress");

                            b1.Property<string>("ConsumerEmail")
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("ConsumerEmail");

                            b1.Property<Guid?>("ConsumerID")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ConsumerID");

                            b1.Property<string>("ConsumerPhone")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("ConsumerPhone");

                            b1.Property<string>("DealDescription")
                                .HasMaxLength(500)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DealDescription");

                            b1.Property<string>("DealReference")
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("DealReference");

                            b1.Property<string>("Items")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Items");

                            b1.HasKey("InvoiceID");

                            b1.ToTable("Invoice");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceID");
                        });

                    b.Navigation("CreditCardDetails");

                    b.Navigation("DealDetails");

                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Transactions.Business.Entities.PaymentRequest", b =>
                {
                    b.OwnsOne("Shared.Integration.Models.Invoicing.InvoiceDetails", "InvoiceDetails", b1 =>
                        {
                            b1.Property<Guid>("PaymentRequestID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("InvoiceSubject")
                                .HasMaxLength(250)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(250)")
                                .HasColumnName("InvoiceSubject");

                            b1.Property<short>("InvoiceType")
                                .HasColumnType("smallint")
                                .HasColumnName("InvoiceType");

                            b1.Property<string>("SendCCTo")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("SendCCTo");

                            b1.HasKey("PaymentRequestID");

                            b1.ToTable("PaymentRequest");

                            b1.WithOwner()
                                .HasForeignKey("PaymentRequestID");
                        });

                    b.OwnsOne("Shared.Integration.Models.Processor.PinPadDetails", "PinPadDetails", b1 =>
                        {
                            b1.Property<Guid>("PaymentRequestID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("TerminalID")
                                .HasMaxLength(16)
                                .IsUnicode(false)
                                .HasColumnType("varchar(16)")
                                .HasColumnName("PinPadTerminalID");

                            b1.HasKey("PaymentRequestID");

                            b1.ToTable("PaymentRequest");

                            b1.WithOwner()
                                .HasForeignKey("PaymentRequestID");
                        });

                    b.OwnsOne("Transactions.Business.Entities.DealDetails", "DealDetails", b1 =>
                        {
                            b1.Property<Guid>("PaymentRequestID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ConsumerAddress")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CustomerAddress");

                            b1.Property<string>("ConsumerEmail")
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("ConsumerEmail");

                            b1.Property<Guid?>("ConsumerID")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ConsumerID");

                            b1.Property<string>("ConsumerPhone")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("ConsumerPhone");

                            b1.Property<string>("DealDescription")
                                .HasMaxLength(500)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DealDescription");

                            b1.Property<string>("DealReference")
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("DealReference");

                            b1.Property<string>("Items")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Items");

                            b1.HasKey("PaymentRequestID");

                            b1.ToTable("PaymentRequest");

                            b1.WithOwner()
                                .HasForeignKey("PaymentRequestID");
                        });

                    b.Navigation("DealDetails");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("PinPadDetails");
                });

            modelBuilder.Entity("Transactions.Business.Entities.PaymentRequestHistory", b =>
                {
                    b.HasOne("Transactions.Business.Entities.PaymentRequest", "PaymentRequest")
                        .WithMany()
                        .HasForeignKey("PaymentRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentRequest");
                });

            modelBuilder.Entity("Transactions.Business.Entities.PaymentTransaction", b =>
                {
                    b.OwnsOne("Transactions.Business.Entities.ClearingHouseTransactionDetails", "ClearingHouseTransactionDetails", b1 =>
                        {
                            b1.Property<Guid>("PaymentTransactionID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long?>("ClearingHouseTransactionID")
                                .HasColumnType("bigint")
                                .HasColumnName("ClearingHouseTransactionID");

                            b1.Property<Guid?>("MerchantReference")
                                .HasMaxLength(50)
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ClearingHouseMerchantReference");

                            b1.HasKey("PaymentTransactionID");

                            b1.ToTable("PaymentTransaction");

                            b1.WithOwner()
                                .HasForeignKey("PaymentTransactionID");
                        });

                    b.OwnsOne("Transactions.Business.Entities.CreditCardDetails", "CreditCardDetails", b1 =>
                        {
                            b1.Property<Guid>("PaymentTransactionID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CardBin")
                                .HasMaxLength(10)
                                .IsUnicode(false)
                                .HasColumnType("varchar(10)")
                                .HasColumnName("CardBin");

                            b1.Property<string>("CardBrand")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("CardBrand");

                            b1.Property<string>("CardExpiration")
                                .HasMaxLength(5)
                                .IsUnicode(false)
                                .HasColumnType("varchar(5)")
                                .HasColumnName("CardExpiration");

                            b1.Property<string>("CardNumber")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("CardNumber");

                            b1.Property<string>("CardOwnerName")
                                .HasMaxLength(100)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("CardOwnerName");

                            b1.Property<string>("CardOwnerNationalID")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("CardOwnerNationalID");

                            b1.Property<string>("CardVendor")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("CardVendor");

                            b1.HasKey("PaymentTransactionID");

                            b1.ToTable("PaymentTransaction");

                            b1.WithOwner()
                                .HasForeignKey("PaymentTransactionID");
                        });

                    b.OwnsOne("Transactions.Business.Entities.DealDetails", "DealDetails", b1 =>
                        {
                            b1.Property<Guid>("PaymentTransactionID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ConsumerAddress")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CustomerAddress");

                            b1.Property<string>("ConsumerEmail")
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("ConsumerEmail");

                            b1.Property<Guid?>("ConsumerID")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ConsumerID");

                            b1.Property<string>("ConsumerPhone")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("ConsumerPhone");

                            b1.Property<string>("DealDescription")
                                .HasMaxLength(500)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DealDescription");

                            b1.Property<string>("DealReference")
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("DealReference");

                            b1.Property<string>("Items")
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Items");

                            b1.HasKey("PaymentTransactionID");

                            b1.ToTable("PaymentTransaction");

                            b1.WithOwner()
                                .HasForeignKey("PaymentTransactionID");
                        });

                    b.OwnsOne("Transactions.Business.Entities.ShvaTransactionDetails", "ShvaTransactionDetails", b1 =>
                        {
                            b1.Property<Guid>("PaymentTransactionID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("ManuallyTransmitted")
                                .HasColumnType("bit")
                                .HasColumnName("ManuallyTransmitted");

                            b1.Property<string>("ShvaAuthNum")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("ShvaAuthNum");

                            b1.Property<string>("ShvaDealID")
                                .HasMaxLength(30)
                                .IsUnicode(false)
                                .HasColumnType("varchar(30)")
                                .HasColumnName("ShvaDealID");

                            b1.Property<string>("ShvaShovarNumber")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("ShvaShovarNumber");

                            b1.Property<string>("ShvaTerminalID")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("ShvaTerminalID");

                            b1.Property<string>("ShvaTransmissionNumber")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("ShvaTransmissionNumber");

                            b1.Property<short?>("Solek")
                                .HasColumnType("smallint")
                                .HasColumnName("Solek");

                            b1.Property<string>("TranRecord")
                                .HasMaxLength(500)
                                .IsUnicode(false)
                                .HasColumnType("varchar(500)")
                                .HasColumnName("ShvaTranRecord");

                            b1.Property<DateTime?>("TransmissionDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("ShvaTransmissionDate");

                            b1.HasKey("PaymentTransactionID");

                            b1.ToTable("PaymentTransaction");

                            b1.WithOwner()
                                .HasForeignKey("PaymentTransactionID");
                        });

                    b.OwnsOne("Transactions.Business.Entities.UpayTransactionDetails", "UpayTransactionDetails", b1 =>
                        {
                            b1.Property<Guid>("PaymentTransactionID")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CashieriD")
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("UpayTransactionID");

                            b1.Property<string>("CreditCardCompanyCode")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("UpayCreditCardCompanyCode");

                            b1.Property<string>("MerchantNumber")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)")
                                .HasColumnName("UpayMerchantNumber");

                            b1.Property<string>("WebUrl")
                                .HasMaxLength(512)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(512)")
                                .HasColumnName("UpayWebUrl");

                            b1.HasKey("PaymentTransactionID");

                            b1.ToTable("PaymentTransaction");

                            b1.WithOwner()
                                .HasForeignKey("PaymentTransactionID");
                        });

                    b.Navigation("ClearingHouseTransactionDetails");

                    b.Navigation("CreditCardDetails");

                    b.Navigation("DealDetails");

                    b.Navigation("ShvaTransactionDetails");

                    b.Navigation("UpayTransactionDetails");
                });

            modelBuilder.Entity("Transactions.Business.Entities.TransactionHistory", b =>
                {
                    b.HasOne("Transactions.Business.Entities.PaymentTransaction", "PaymentTransaction")
                        .WithMany()
                        .HasForeignKey("PaymentTransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentTransaction");
                });
#pragma warning restore 612, 618
        }
    }
}
