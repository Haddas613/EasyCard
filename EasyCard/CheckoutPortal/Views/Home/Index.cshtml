@using Shared.Helpers
@{
    ViewData["Title"] = "EasyCard";
}
@model ChargeViewModel
@inject CommonLocalizationService localizer

<form asp-action="CancelPayment" method="post" hidden id="cancel-form">
    <input type="hidden" asp-for="RedirectUrl" id="RedirectUrlHidden" />
    <input type="hidden" asp-for="PaymentRequest" id="PaymentRequestHidden" />
    <input type="hidden" asp-for="PaymentIntent" id="PaymentIntent" />
    <input type="hidden" asp-for="ApiKey" id="ApiKeyHidden" />
    <input type="hidden" asp-for="Currency" id="CurrencyHidden" />
    <input type="hidden" asp-for="Description" id="DescriptionHidden" />
</form>


<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="panel panel-default">
            <partial name="_ValidationSummary" />

            <div class="panel-heading">
                <p class="px-3 font-italic">@Model.Description</p>
                @*@if (Model.NumberOfPayments > 1)
        {
            <ul class="list-group px-2">
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @localizer.Get("NumberOfPayments")
                    <span class="text-end">
                        <b>@Model.NumberOfPayments</b>
                    </span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @localizer.Get("InitialPayment")
                    <span class="text-end">
                        <b>@Model.InitialPaymentAmount?.ToString("N")@Model.Currency.GetCurrencySymbol()</b>
                    </span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @localizer.Get("PaymentAmount")
                    <span class="text-end">
                        <b>@Model.InstallmentPaymentAmount?.ToString("N")@Model.Currency.GetCurrencySymbol()</b>
                    </span>
                    <span class="badge badge-primary badge-pill"></span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @localizer.Get("Total")
                    <span class="text-end">
                        <b>@Model.TotalAmount?.ToString("N")@Model.Currency.GetCurrencySymbol()</b>
                    </span>
                </li>
            </ul>
        }*@
            </div>


            <div class="panel-body">

                <form asp-action="Charge" method="post" id="checkout-form">
                    <input type="hidden" asp-for="RedirectUrl" />
                    <input type="hidden" asp-for="PaymentRequest" />
                    <input type="hidden" asp-for="PaymentIntent" />
                    <input type="hidden" asp-for="ApiKey" />
                    <input type="hidden" asp-for="Currency" />
                    <input type="hidden" asp-for="Description" />
                    <input type="hidden" asp-for="IssueInvoice" />
                    <input type="hidden" asp-for="AllowPinPad" />
                    <input type="hidden" asp-for="PayWithBit" />

                    @if (Model.AllowPinPad == true && Model.PaymentIntent != null)
                    {
                        <input type="hidden" asp-for="ConnectionID" />
                    }

                    @if (Model.TransactionTypes.Count() > 1 && !Model.OnlyAddCard)
                    {
                        <div class="form-group">
                            <label for="number-of-payments">@localizer.Get("TransactionType")</label>
                            <select class="form-control" id="ttype" asp-for="TransactionType">
                                @foreach (var t in Model.TransactionTypes)
                                {
                                    <option selected="@(Model.TransactionType == t)" value="@t">@localizer.Get(t.ToString())</option>
                                }
                            </select>
                            <span asp-validation-for="TransactionType"></span>
                        </div>
                        <ul class="list-group px-2" id="installments-area" hidden="@(Model.TransactionType == Shared.Integration.Models.TransactionTypeEnum.RegularDeal)">
                            <li class="list-group-item">
                                <div class="form-group">
                                    <label for="number-of-payments">@localizer.Get("NumberOfPayments")</label>
                                    <select class="form-control" id="number-of-payments" asp-for="NumberOfPayments">
                                        @for (var i = Model.MinInstallments; i <= Model.MaxCreditInstallments; i++)
                                        {
                                            <option selected="@(i == Model.NumberOfPayments)" value="@i">@i</option>
                                        }
                                    </select>
                                    <span asp-validation-for="NumberOfPayments"></span>
                                </div>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @localizer.Get("InitialPaymentAmount") (@Model.Currency.GetCurrencySymbol())
                                @*<label asp-for="InitialPaymentAmount" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("InitialPaymentAmount") (@Model.Currency.GetCurrencySymbol())</label>*@
                                <div class="col">
                                    <input id="initial-payment-amount" type="number" step="0.01" class="form-control form-control-sm text-end"
                                           placeholder="@localizer.Get("TotalSum")" asp-for="InitialPaymentAmount" autocomplete="off">
                                    <span asp-validation-for="InitialPaymentAmount"></span>
                                </div>
                                <input type="hidden" asp-for="InstallmentPaymentAmount" />
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @localizer.Get("PaymentAmount")
                                <span class="text-end">
                                    <b id="payment-amount">@Model.InstallmentPaymentAmount?.ToString("N")@Model.Currency.GetCurrencySymbol()</b>
                                </span>
                                <span class="badge badge-primary badge-pill"></span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @localizer.Get("Total")
                                <span class="text-end">
                                    <b id="total-amount">@(Model.TotalAmount?.ToString("N") ?? Model.Amount?.ToString("N"))@Model.Currency.GetCurrencySymbol()</b>
                                </span>
                            </li>
                        </ul>
                    }

                    @if ((Model.Amount.GetValueOrDefault() > 0 && !Model.UserAmount) || Model.OnlyAddCard)
                    {
                        <input type="hidden" asp-for="Amount" />

                        <h3 id="total-amount-display" hidden="@(Model.TransactionType != Shared.Integration.Models.TransactionTypeEnum.RegularDeal)" class="panel-title text-center @(Model.IsRefund ? "text-danger" : "")">
                            @(Model.IsRefund ? localizer.Get("Refund") : localizer.Get("TotalSum")): @Model.Amount.GetValueOrDefault().ToString("F2")@Model.Currency.GetCurrencySymbol()
                        </h3>
                    }

                    @if (Model.UserAmount || (Model.SavedTokens?.Count() > 0 && !Model.OnlyAddCard))
                    {
                        <fieldset class="border rounded p-2 m-2" id="amount-area">
                            @if (Model.UserAmount)
                            {
                                <div class="form-group row">
                                    <label asp-for="Amount" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("TotalSum") (@Model.Currency.GetCurrencySymbol())</label>
                                    <div class="col-sm-9">
                                        <input type="number" step="0.01" class="form-control form-control-sm" placeholder="@localizer.Get("TotalSum")" asp-for="Amount" autocomplete="off">
                                        <span asp-validation-for="Amount"></span>
                                    </div>
                                </div>
                            }
                            @if (Model.SavedTokens?.Count() > 0 && !Model.OnlyAddCard)
                            {
                                <div class="form-group row">
                                    <label asp-for="CreditCardToken" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("UseSavedCard")</label>
                                    <div class="col-sm-9">

                                        <div class="form-check">
                                            @foreach (var savedToken in Model.SavedTokens)
                                            {
                                                <input class="form-check-input" type="radio" asp-for="CreditCardToken" value="@savedToken.Key" />
                                                <span dir="ltr">@savedToken.Value</span>
                                                <br />
                                            }
                                            <input class="form-check-input" type="radio" asp-for="CreditCardToken" value="@(null)" checked />@localizer.Get("EnterNewCard")<br />
                                        </div>

                                    </div>
                                </div>
                            }
                        </fieldset>
                    }

                    <fieldset class="border rounded p-2 m-2" id="card-info-group-area">
                        @if (Model.AllowPinPad ?? false)
                        {
                            <div class="form-group row mb-0">
                                <label class="fcol-form-label col-form-label-sm col-sm-3" asp-for="PinPad">@localizer.Get("MakePinPadDeal")</label>
                                <div class="col-sm-9">
                                    <div class="form-check">
                                        <input id="pin-pad-deal" type="checkbox" class="form-check-input" asp-for="PinPad">
                                        <span asp-validation-for="PinPad"></span>
                                    </div>
                                </div>
                            </div>
                            @if (Model.PinPadDevices?.Any() == true)
                            {
                                <div class="form-group p-2" id="pin-pad-devices" hidden="@(Model.PinPadDeviceID == null)">
                                    <select class="form-control" id="device" asp-for="PinPadDeviceID">
                                        @foreach (var t in Model.PinPadDevices)
                                        {
                                            <option selected="@(Model.PinPadDeviceID == t.DeviceID)" value="@t.DeviceID">@(t.DeviceID)-@(t.DeviceName)</option>
                                        }
                                    </select>
                                    <span asp-validation-for="PinPadDeviceID"></span>
                                </div>
                            }
                        }
                        <div id="credit-card-info-area">
                            <div class="form-group row">
                                <label asp-for="CardNumber" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("CardNumber")</label>
                                <div class="col-sm-9">
                                    <input id="cc-number" type="tel" class="form-control cc-number form-control-sm" asp-for="CardNumber" autofocus autocomplete="cc-number" placeholder="•••• •••• •••• ••••">
                                    <span asp-validation-for="CardNumber"></span>
                                    <span class="control-validation"></span>
                                </div>
                            </div>
                            <div class="form-group row">
                                <label asp-for="CardExpiration" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("Expiration")</label>
                                <div class="col-sm-9">
                                    <input id="cc-exp" type="tel" class="form-control cc-exp form-control-sm" placeholder="••/••" asp-for="CardExpiration" autocomplete="cc-exp">
                                    <span asp-validation-for="CardExpiration"></span>
                                    <span class="control-validation"></span>
                                </div>
                            </div>

                            <div class="form-group row">
                                <label asp-for="Cvv" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("CVV")</label>
                                <div class="col-sm-9">
                                    <input type="tel" class="form-control cc-cvc form-control-sm" placeholder="•••" asp-for="Cvv" autocomplete="off">
                                    <span asp-validation-for="Cvv"></span>
                                    <span class="control-validation"></span>
                                </div>
                            </div>

                            @if (Model.EnabledFeatures?.Any(f => f == Merchants.Shared.Enums.FeatureEnum.CreditCardTokens) == true)
                            {
                                @if (Model.OnlyAddCard)
                                {
                                    <div class="form-group row">
                                        <label class="fcol-form-label col-form-label-sm col-sm-3" asp-for="SaveCreditCard">@localizer.Get("SaveCard")</label>
                                        <div class="col-sm-9">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" asp-for="SaveCreditCard" checked disabled >
                                            </div>
                                        </div>
                                    </div>
                                }
                                else if (Model.ConsumerID.HasValue)
                                {
                                    <div class="form-group row">
                                        <label class="fcol-form-label col-form-label-sm col-sm-3" asp-for="SaveCreditCard">@localizer.Get("SaveCard")</label>
                                        <div class="col-sm-9">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" asp-for="SaveCreditCard">
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </fieldset>
                    <fieldset class="border rounded p-2 m-2">
                        <div class="form-group row">
                            <label asp-for="Name" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("CardOwnerName")</label>
                            <div class="col-sm-9">
                                <input class="form-control form-control-sm" placeholder="@localizer.Get("CardOwnerName")" asp-for="Name" autocomplete="off">
                                <span asp-validation-for="Name"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label asp-for="Email" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("Email")</label>
                            <div class="col-sm-9">
                                <input type="email" class="form-control form-control-sm" placeholder="@localizer.Get("Email")" asp-for="Email" autocomplete="off">
                                <span asp-validation-for="Email"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label asp-for="NationalID" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("NationalID")</label>
                            <div class="col-sm-9">
                                <input type="tel" class="form-control form-control-sm" placeholder="@localizer.Get("NationalID")" asp-for="NationalID" autocomplete="off">
                                <span asp-validation-for="NationalID"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label asp-for="Phone" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("Phone")</label>
                            <div class="col-sm-9">
                                <input type="tel" class="form-control form-control-sm" placeholder="@localizer.Get("Phone")" asp-for="Phone" autocomplete="off">
                                <span asp-validation-for="Phone"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label asp-for="AuthNum" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("AuthorizationCodeOptional")</label>
                            <div class="col-sm-9">
                                <input type="tel" class="form-control form-control-sm" placeholder="@localizer.Get("AuthorizationCode")" asp-for="AuthNum" autocomplete="off">
                                <span asp-validation-for="AuthNum"></span>
                            </div>
                        </div>

                    </fieldset>

                    <div class="form-group d-flex justify-content-end">
                        <button class="btn btn-outline-danger mx-1" id="cancel-btn">
                            @localizer.Get("CancelPayment")
                        </button>
                        @if (Model.IsRefund)
                        {
                            <input class="btn btn-danger" type="button" id="submitbtn" value="@localizer.Get("Refund")" />
                        }
                        else if (Model.OnlyAddCard)
                        {
                            <input class="btn btn-primary" type="button" id="submitbtn" value="@localizer.Get("OnlyAddCard")" />
                        }
                        else
                        {
                            <input class="btn btn-primary" type="button" id="submitbtn" value="@localizer.Get("PayWithEasyCard")" />
                        }
                        @if(Model.AllowBit == true)
                        {
                            <button class="btn btn-secondary mx-1" type="button" id="paywithbit">
                                <img height="20px" src="https://public.bankhapoalim.co.il/bitcom/2.2.1/assets/bit-logo.svg" />
                                PayWithBit
                            </button>
                        }
                    </div>
                </form>
            </div>
        </div>
    </div>

</div>

@section Scripts {
@if (Model.PaymentIntent != null && Model.AllowPinPad == true)
{
    <script src="~/lib/signalr/signalr.min.js"></script>
    <script src="~/lib/toastr/toastr.min.js"></script>
    <link rel="stylesheet" href="~/lib/toastr/toastr.min.css" />
}

@await Html.PartialAsync("_ValidationScriptsPartial")
<script nws-csp-add-nonce="true">
        (function() {
            $(document).ready(function () {

            let amt = parseFloat($("#Amount").val());
            if (!amt) {
                $("#Amount").val(amt.toFixed(2))
            }
            @if (Model.PaymentIntent != null && Model.AllowPinPad == true)
            {
                <text>
                    toastr.options = {
                      "closeButton": false,
                      "newestOnTop": false,
                      "progressBar": false,
                      "positionClass": "toast-top-right",
                      "preventDuplicates": false,
                      "onclick": null,
                      "timeOut": -1,
                      "extendedTimeOut ": -1,
                      "disableTimeOut": true,
                      "tapToDismiss": false,
                      "toastClass": "signalr-toast",
                      "showEasing": "swing",
                      "hideEasing": "linear",
                      "showMethod": "fadeIn",
                      "hideMethod": "fadeOut"
                    }
                    let signalRClient = new (function() {
                        this.transactionsHub = null;
                        this.toast = null;
                        this.establishSignalRConnection = function () {
                            if (this.transactionsHub) {
                                return Promise.resolve();
                            }
                            const options = {
                                accessTokenFactory: () => {
                                    //return this.$oidc.getAccessToken();
                                },
                                transport: 1
                            };

                            this.transactionsHub = new signalR.HubConnectionBuilder()
                                .withUrl(
                                    `/hubs/transactions`,
                                    options
                                )
                                .withAutomaticReconnect()
                                .configureLogging("Warning")
                                .build();

                            this.transactionsHub.on("TransactionStatusChanged", (payload) => {
                                console.log(this.toast)
                                if(this.toast){
                                  this.toast.text(payload.statusString)
                                }else{
                                    this.toast = toastr["info"](payload.statusString);
                                }
                            });

                            return this.transactionsHub.start().then(r => {
                                $("#ConnectionID").val(this.transactionsHub.connectionId)
                            });
                        };
                        this.disposeSignalRConnection = function () {
                            if (!this.transactionsHub) {
                                return;
                            }
                            this.toast.fadeOut();
                            this.transactionsHub.stop();
                        }
                    })
                </text>
            }

            $('input[name="CreditCardToken"]').on('change', function (e) {
                if (e.target.value == "") {
                    $("#card-info-group-area").attr("hidden", false);
                } else {
                    $("#card-info-group-area").attr("hidden", true);
                }
            });

            $("#cancel-btn").on('click', function (e) {
                e.preventDefault();
                $('#cancel-form').submit();
            });

            @if(Model.PaymentIntent != null && Model.AllowPinPad == true)
            {
            <text>
            $("#submitbtn").on("click", function (e) {
                    e.preventDefault();
                    if (!$("#checkout-form").valid()) {
                        return;
                    }
                    signalRClient.establishSignalRConnection().then(r => {
                        $("#checkout-form").submit();
                    }, e => {
                        $("#checkout-form").submit();
                    })
                })
            </text>
            }
            else
            {
            <text>
                $("#submitbtn").on("click", function () {
                    $("#checkout-form").submit();
                })
            </text>
            }

            $("#paywithbit").on("click", function () {
                if (!$("#checkout-form").valid()) {
                    return;
                }
                $("#PayWithBit").val(true);
                $("#checkout-form").submit();
            })

            //$("#Amount").on("focus", function () {
            //    if ($("#SaveCreditCard").is(":checked")) {
            //        setTimeout(() => {
            //            $("span[data-valmsg-for=Amount]").html("");
            //            $("#Amount").removeClass("input-validation-error");
            //        }, 500)
            //    }
            //});

            //$("#Amount").on("input", function (e) {
            //    if ((!e.target.value || !Number(e.target.value)) && $("#SaveCreditCard").is(":checked")) {
            //        setTimeout(() => {
            //            $("span[data-valmsg-for=Amount]").html("");
            //            $("#Amount").removeClass("input-validation-error");
            //        }, 500)
            //    }
            //});

            //$("#SaveCreditCard").on("click", function (e) {
            //    if ($(e.target).is(":checked")) {
            //        $("span[data-valmsg-for=Amount]").html("");
            //        $("#Amount").removeClass("input-validation-error");
            //    }
            //})

            $("#checkout-form").on("submit", function (e) {

                //if (!Number($("#Amount").val()) && $("#SaveCreditCard").is(":checked")) {
                //    $("#amount-area").hide();
                //} else {
                //    $("#amount-area").show();
                //}
                if (!$("#checkout-form").valid()) {
                    e.preventDefault();
                    return;
                }
                let ccvaltrim = $("#cc-number").val().replace(/ /g, '');
                    $("#cc-number").val(ccvaltrim);
                if (document.getElementById("ttype")) {
                    if (document.getElementById("ttype").value == "@Shared.Integration.Models.TransactionTypeEnum.RegularDeal.ToString()" ||
                        document.getElementById("ttype").value == "@Shared.Integration.Models.TransactionTypeEnum.Immediate.ToString()") {
                        $("#installments-area").remove();
                        }
                }

                var pinPadDeal = document.getElementById("pin-pad-deal");
                if (pinPadDeal && pinPadDeal.checked == true) {
                    $("#credit-card-info-area").remove();
                }

                document.getElementById("loading-spinner").hidden = false;
                document.getElementsByTagName("body")[0].classList.add("no-scroll")
            })

            window.onunload = function (e) {
                if (signalRClient) {
                    signalRClient.disposeSignalRConnection();
                }
            };

            $("#number-of-payments").on("change", function (e) {
                let totalAmount = $("#Amount").val();
                let newAmount = Math.floor((totalAmount / e.target.value));
                let initialAmount = parseFloat((totalAmount - newAmount * (e.target.value - 1)).toFixed(2));

                $("#payment-amount").text(newAmount + "@Html.Raw(Model.Currency.GetCurrencySymbol())");
                $("#InstallmentPaymentAmount").val(newAmount)
                $("#initial-payment-amount").val(initialAmount);

                $("#total-amount").text(totalAmount + "@Html.Raw(Model.Currency.GetCurrencySymbol())")
            });

            $("#initial-payment-amount").on("input", function (e) {
                let self = this;
                if (self.ipaTimeout) {
                    clearTimeout(self.ipaTimeout);
                }
                self.ipaTimeout = setTimeout(() => {
                    let totalAmount = $("#Amount").val();
                    if (!Number(totalAmount)) {
                        $("#initial-payment-amount").val(0);
                        return;
                    }

                    let numOfPayments = parseInt($("#number-of-payments").val());
                    let val = parseFloat(e.target.value);
                    let max = parseFloat(e.target.getAttribute("max"));

                    if (val > max || val == max) {
                        val = e.target.value = totalAmount - 0.1 * numOfPayments;
                    }

                    let newAmount = (totalAmount - val) / (numOfPayments - 1);
                    let initialAmount = parseFloat((totalAmount - newAmount * (numOfPayments - 1)).toFixed(2));

                    //console.log(totalAmount, numOfPayments, val, newAmount, initialAmount)

                    let installmentAmountRounded = parseFloat(newAmount.toFixed(2))
                    $("#InstallmentPaymentAmount").val(installmentAmountRounded)
                    $("#payment-amount").text(installmentAmountRounded + "@Html.Raw(Model.Currency.GetCurrencySymbol())");
                    $("#initial-payment-amount").val();

                }, 1000);
            });

            $("#Amount").on('input', function (e) {
                $("#number-of-payments").trigger("change");
                let numOfPayments = parseInt($("#number-of-payments").val());
                $("#initial-payment-amount").attr("max", (e.target.value - 0.1 * numOfPayments).toFixed(2));
            })

            $("#ttype").on("change", function (e) {
                let value = e.target.value;
                let min = 0; let max = 0;
                let totalAmountDisplay = document.getElementById("total-amount-display");
                let installmentsArea = document.getElementById("installments-area");

                if (value == "@Shared.Integration.Models.TransactionTypeEnum.Installments.ToString()") {
                    min = @(Model.MinInstallments ?? 2);
                    max = @(Model.MaxInstallments ?? 12);
                }
                else if (value == "@Shared.Integration.Models.TransactionTypeEnum.Credit.ToString()") {
                    min = @(Model.MinCreditInstallments ?? 3);
                    max = @(Model.MaxCreditInstallments ?? 12);
                }
                else {
                    if (totalAmountDisplay) {
                        totalAmountDisplay.hidden = false;
                    }
                    if (installmentsArea) {
                        installmentsArea.hidden = true;
                    }
                    return;
                }

                var select = document.getElementById("number-of-payments");
                select.length = 0;
                for (var i = min; i <= max; i++) {
                    select.options.add(new Option(i, i))
                }

                $("#number-of-payments").trigger("change");
                if (totalAmountDisplay) {
                    totalAmountDisplay.hidden = true;
                }
                if (installmentsArea) {
                    installmentsArea.hidden = false;
                }
            })

            $("#pin-pad-deal").on("change", function (e) {
                document.getElementById("credit-card-info-area").hidden = e.target.checked;
                document.getElementById("pin-pad-devices").hidden = !e.target.checked;
            })
            $("#pin-pad-deal").trigger("change");
            $("#number-of-payments").trigger("change");
        })})()
</script>
}
