@using Shared.Helpers
@model ChargeViewModel
@inject CommonLocalizationService localizer

<div id="toast-container" class="custom-toastr">
    <!-- Only way to prevent the destruction -->
    <span></span>
</div>

<form asp-action="Charge" method="post" id="checkout-form">
    <input type="hidden" asp-for="RedirectUrl" />
    <input type="hidden" asp-for="PaymentRequest" />
    <input type="hidden" asp-for="PaymentIntent" />
    <input type="hidden" asp-for="ApiKey" />
    <input type="hidden" asp-for="Currency" />
    <input type="hidden" asp-for="Description" />
    <input type="hidden" asp-for="IssueInvoice" />
    <input type="hidden" asp-for="AllowPinPad" />
    <input type="hidden" asp-for="ThreeDSServerTransID" />
    <input type="hidden" asp-for="Origin" />
    <input type="hidden" asp-for="QueryLang" />

    @if (Model.AllowPinPad == true && Model.PaymentIntent != null)
    {
        <input type="hidden" asp-for="ConnectionID" />
    }
    @if (Model.TransactionTypes.Count() > 1 && !Model.OnlyAddCard)
    {
        <div class="form-group">
            <label for="number-of-payments">@localizer.Get("TransactionType")</label>
            <select class="form-control" id="ttype" asp-for="TransactionType">
                @foreach (var t in Model.TransactionTypes)
                {
                    <option selected="@(Model.TransactionType == t)" value="@t">@localizer.Get(t.ToString())</option>
                }
            </select>
            <span asp-validation-for="TransactionType"></span>
        </div>
        <ul class="list-group" id="installments-area" hidden="@(Model.TransactionType == Shared.Integration.Models.TransactionTypeEnum.RegularDeal)">
            <li class="list-group-item">
                <div class="form-group">
                    <label for="number-of-payments">@localizer.Get("NumberOfPayments")</label>
                    <select class="form-control" id="number-of-payments" asp-for="NumberOfPayments">
                        @for (var i = Model.MinInstallments; i <= Model.MaxCreditInstallments; i++)
                        {
                            <option selected="@(i == Model.NumberOfPayments)" value="@i">@i</option>
                        }
                    </select>
                    <span asp-validation-for="NumberOfPayments"></span>
                </div>
            </li>
            <li class="list-group-item d-flex justify-content-between align-items-center">
                @localizer.Get("InitialPaymentAmount") (@Model.Currency.GetCurrencySymbol())
                @*<label asp-for="InitialPaymentAmount">@localizer.Get("InitialPaymentAmount") (@Model.Currency.GetCurrencySymbol())</label>*@
                <div>
                    <input id="initial-payment-amount" type="number" step="0.01" class="form-control form-control-sm text-end"
                           placeholder="@localizer.Get("TotalSum")" asp-for="InitialPaymentAmount" autocomplete="off">
                    <span asp-validation-for="InitialPaymentAmount"></span>
                </div>
                <input type="hidden" asp-for="InstallmentPaymentAmount" />
            </li>
            <li class="list-group-item d-flex justify-content-between align-items-center">
                @localizer.Get("PaymentAmount")
                <span class="text-end">
                    <b id="payment-amount">@Model.InstallmentPaymentAmount?.ToString("N")@Model.Currency.GetCurrencySymbol()</b>
                </span>
                <span class="badge badge-primary badge-pill"></span>
            </li>
            <li class="list-group-item d-flex justify-content-between align-items-center">
                @localizer.Get("Total")
                <span class="text-end">
                    <b id="total-amount">@(Model.TotalAmount?.ToString("N") ?? Model.Amount?.ToString("N"))@Model.Currency.GetCurrencySymbol()</b>
                </span>
            </li>
        </ul>
    }

    @if ((Model.Amount.GetValueOrDefault() > 0 && !Model.UserAmount))
    {
        <input type="hidden" asp-for="Amount" />

        <h3 id="total-amount-display" hidden="@(Model.TransactionType != Shared.Integration.Models.TransactionTypeEnum.RegularDeal)" class="payment-panel_title @(Model.IsRefund ? "text-danger" : "")">
            @(Model.IsRefund ? localizer.Get("Refund") : localizer.Get("TotalSum")): @Model.Amount.GetValueOrDefault().ToString("F2")@Model.Currency.GetCurrencySymbol()
        </h3>
    }

    @if (Model.UserAmount || (Model.SavedTokens?.Count() > 0 && !Model.OnlyAddCard))
    {
        <fieldset id="amount-area">
            @if (Model.UserAmount)
            {
                <div class="form-group">
                    <label asp-for="Amount">@localizer.Get("TotalSum") (@Model.Currency.GetCurrencySymbol())</label>
                    <div>
                        <input type="number" step="0.01" class="form-control form-control-sm" placeholder="@localizer.Get("TotalSum")" asp-for="Amount" autocomplete="off">
                        <span asp-validation-for="Amount"></span>
                    </div>
                </div>
            }
            @if (Model.SavedTokens?.Count() > 0 && !Model.OnlyAddCard)
            {
                <div class="form-group">
                    <label asp-for="CreditCardToken">@localizer.Get("UseSavedCard")</label>
                    <div>

                        @foreach (var savedToken in Model.SavedTokens)
                        {
                            <div class="form-check d-flex justify-content-between">
                                <div class="card_number">
                                    <input class="form-check-input" type="radio" asp-for="CreditCardToken" value="@savedToken.CreditCardTokenID" />
                                    <span dir="ltr">@savedToken.Label</span>
                                </div>
                                @if (savedToken.Created.HasValue)
                                {
                                    <span class="align-self-end">
                                        <small class="card_expiration">@(savedToken.Created?.ToString("dd/MM/yyyy"))</small>
                                    </span>
                                }
                            </div>
                        }
                        <div class="card_number">
                            <input class="form-check-input enter-new-card" type="radio" asp-for="CreditCardToken" value="@(null)" checked />
                            <span>@localizer.Get("EnterNewCard")</span>
                        </div>

                    </div>
                </div>
            }
        </fieldset>
    }

    <fieldset id="card-info-group-area">
        @if (Model.AllowPinPad ?? false)
        {
            <div class="form-group checkbox-group mb-0">
                <input id="pin-pad-deal" type="checkbox" class="form-check-input" asp-for="PinPad">
                <label class="fcol-form-label col-form-label-sm col-sm-3" asp-for="PinPad">@localizer.Get("MakePinPadDeal")</label>
            </div>
            @if (Model.PinPadDevices?.Any() == true)
            {
                <div class="form-group p-2" id="pin-pad-devices" hidden="@(Model.PinPadDeviceID == null)">
                    <select class="form-control" id="device" asp-for="PinPadDeviceID">
                        @foreach (var t in Model.PinPadDevices)
                        {
                            <option selected="@(Model.PinPadDeviceID == t.DeviceID)" value="@t.DeviceID">@(t.DeviceID)-@(t.DeviceName)</option>
                        }
                    </select>
                    <span asp-validation-for="PinPadDeviceID"></span>
                </div>
            }
        }
        <div id="credit-card-info-area">
            <div class="form-group__line">
                <div class="form-group">
                    <label asp-for="CardNumber">@localizer.Get("CardNumber")</label>
                    <div>
                        <input id="cc-number" type="tel" class="form-control cc-number form-control-sm" asp-for="CardNumber" autofocus autocomplete="cc-number" placeholder="•••• •••• •••• ••••">
                        <span asp-validation-for="CardNumber"></span>
                        <span class="control-validation"></span>
                        <span hidden id="cc-added-warn" class="text-warning">@localizer.Get("ThisCreditCardIsAlreadyAddedAsToken")</span>
                    </div>
                </div>
                <div class="form-group">
                    <label asp-for="CardExpiration">@localizer.Get("Expiration")</label>
                    <div>
                        <input id="cc-exp" type="tel" class="form-control cc-exp form-control-sm" placeholder="••/••" asp-for="CardExpiration" autocomplete="cc-exp">
                        <span asp-validation-for="CardExpiration"></span>
                        <span class="control-validation"></span>
                    </div>
                </div>
            </div>

            <div class="form-group__line">
                <div class="form-group">
                    <label asp-for="Name">@localizer.Get("CardOwnerName")</label>
                    <div>
                        <input class="form-control form-control-sm" placeholder="@localizer.Get("CardOwnerName")" asp-for="Name" autocomplete="off">
                        <span asp-validation-for="Name"></span>
                    </div>
                </div>

                <div class="form-group">
                    <label asp-for="Cvv">@localizer.Get("CVV")</label>
                    <div>
                        <input type="tel" class="form-control cc-cvc form-control-sm" placeholder="•••" asp-for="Cvv" autocomplete="off">
                        <span asp-validation-for="Cvv"></span>
                        <span class="control-validation"></span>
                    </div>
                </div>
            </div>

            @if (Model.EnabledFeatures?.Any(f => f == Merchants.Shared.Enums.FeatureEnum.CreditCardTokens) == true)
            {
                @if (Model.OnlyAddCard)
                {
                    <div class="form-group checkbox-group">
                        <input type="checkbox" asp-for="SaveCreditCard" checked disabled>
                        <label class="fcol-form-label col-form-label-sm col-sm-3" asp-for="SaveCreditCard">@localizer.Get("SaveCard")</label>
                    </div>
                }
                else if (Model.ConsumerID.HasValue)
                {
                    <div class="form-group checkbox-group">
                        <input type="checkbox" asp-for="SaveCreditCard">
                        <label class="fcol-form-label col-form-label-sm col-sm-3" asp-for="SaveCreditCard">@localizer.Get("SaveCard")</label>
                    </div>
                }
            }
        </div>
    </fieldset>
    <fieldset>
        <div class="form-group">
            <label asp-for="Name">@localizer.Get("CardOwnerName")</label>
            <div>
                <input class="form-control form-control-sm" placeholder="@localizer.Get("CardOwnerName")" asp-for="Name" autocomplete="off">
                <span asp-validation-for="Name"></span>
            </div>
        </div>
        @if (Model.HideEmail != true)
        {
            <div class="form-group">
                <label asp-for="Email">@localizer.Get("Email")</label>
                <div>
                    <input type="email" class="form-control form-control-sm" placeholder="@localizer.Get("Email")" asp-for="Email" autocomplete="off">
                    <span asp-validation-for="Email"></span>
                </div>
            </div>
        }
        @if (Model.HideNationalID != true)
        {
            <div class="form-group">
                <label asp-for="NationalID">@localizer.Get("NationalID")</label>
                <div>
                    <input type="tel" class="form-control form-control-sm" placeholder="@localizer.Get("NationalID")" asp-for="NationalID" autocomplete="off">
                    <span asp-validation-for="NationalID"></span>
                </div>
            </div>
        }
        @if (Model.HidePhone != true)
        {
            <div class="form-group">
                <label asp-for="Phone">@localizer.Get("Phone")</label>
                <div>
                    <input type="tel" class="form-control form-control-sm" placeholder="@localizer.Get("Phone")" asp-for="Phone" autocomplete="off">
                    <span asp-validation-for="Phone"></span>
                </div>
            </div>
        }
        @if (Model.ShowAuthCode == true)
        {
            <div class="form-group">
                <label asp-for="AuthNum">@localizer.Get("AuthorizationCodeOptional")</label>
                <div>
                    <input type="tel" class="form-control form-control-sm" placeholder="@localizer.Get("AuthorizationCode")" asp-for="AuthNum" autocomplete="off">
                    <span asp-validation-for="AuthNum"></span>
                </div>
            </div>
        }

    </fieldset>

    <div class="form-group payment-panel_button-group">
        <button class="btn btn-secondary" id="cancel-btn">
            @localizer.Get("CancelPayment")
        </button>
        @if (Model.IsRefund)
        {
            <input class="btn-danger" type="button" id="submitbtn" value="@localizer.Get("Refund")" />
        }
        else if (Model.OnlyAddCard)
        {
            <input class="btn-primary" type="button" id="submitbtn" value="@localizer.Get("OnlyAddCard")" />
        }
        else
        {
            <input class="btn-primary" type="button" id="submitbtn" value="@localizer.Get("PayWithEasyCard")" />
        }
    </div>

    <div id="threeDSMethodIFrameContainer"></div>
    <div id="threeDSCReqIframeContainer" class="messagepop"></div>

</form>

@if (Model.PaymentIntent != null && Model.AllowPinPad == true)
{
<script src="~/lib/signalr/signalr.min.js"></script>
}

<script nws-csp-add-nonce="true">
    (function() {
        document.addEventListener("DOMContentLoaded", function() {

        let amt = parseFloat($("#Amount").val());
        if (!amt) {
            $("#Amount").val(amt.toFixed(2))
        }
        @if (Model.PaymentIntent != null && Model.AllowPinPad == true)
        {
            <text>
                toastr.options = {
                  "closeButton": false,
                  "newestOnTop": false,
                  "progressBar": false,
                  "positionClass": "toast-top-right",
                  "preventDuplicates": false,
                  "onclick": null,
                  "timeOut": -1,
                  "extendedTimeOut ": -1,
                  "disableTimeOut": true,
                  "tapToDismiss": false,
                  "toastClass": "signalr-toast",
                  "showEasing": "swing",
                  "hideEasing": "linear",
                  "showMethod": "fadeIn",
                  "hideMethod": "fadeOut",
                }
                let signalRClient = new (function() {
                    this.transactionsHub = null;
                    this.toast = null;
                    this.establishSignalRConnection = function () {
                        if (this.transactionsHub) {
                            return Promise.resolve();
                        }
                        const options = {
                            accessTokenFactory: () => {
                                //return this.$oidc.getAccessToken();
                            },
                            transport: 1
                        };

                        this.transactionsHub = new signalR.HubConnectionBuilder()
                            .withUrl(
                                `/hubs/transactions`,
                                options
                            )
                            .withAutomaticReconnect()
                            .configureLogging("Warning")
                            .build();

                        this.transactionsHub.on("TransactionStatusChanged", (payload) => {
                            console.log(this.toast)
                            if(this.toast){
                              this.toast.text(payload.statusString)
                            }else{
                                this.toast = toastr["info"](payload.statusString);
                            }
                        });

                        return this.transactionsHub.start().then(r => {
                            $("#ConnectionID").val(this.transactionsHub.connectionId)
                        });
                    };
                    this.disposeSignalRConnection = function () {
                        if (!this.transactionsHub) {
                            return;
                        }
                        this.toast.fadeOut();
                        this.transactionsHub.stop();
                    }
                })
            </text>
        }

        $('input[name="CreditCardToken"]').on('change', function (e) {
            if (e.target.value == "") {
                $("#card-info-group-area").attr("hidden", false);
            } else {
                $("#card-info-group-area").attr("hidden", true);
            }
            $("#pin-pad-deal").attr('checked', false);
        });

        $("#cancel-btn").on('click', function (e) {
            e.preventDefault();
            $('#cancel-form').submit();
        });

        @if(Model.EnableThreeDS == true) // TODO: case with pinpad
        {
        <text>
            $.fn.slideFadeToggle = function (easing, callback) {
                return this.animate({ opacity: 'toggle', height: 'toggle' }, 'fast', easing, callback);
            };

            window.notification3Ds = function (cres) {
                if (cres.success) {
                    $('#threeDSCReqIframeContainer').slideFadeToggle();
                    return $("#checkout-form").submit();
                } else {
                    toastr["error"]('@(localizer.Get("ThreeDSError"))' + cres.error);
                    window.switchLoadingSpinner(false);
                    $('#threeDSCReqIframeContainer').slideFadeToggle();
                }
            };

            const continueInCaseOf3DSecureError = false;

            const authenticate3Ds = function () {
                let payload = $('#checkout-form').serialize();

                return $.ajax({
                    url: "/Home/Authenticate3Ds",
                    data: payload,
                    type: "POST",
                    success: function (data, status, xhr) {
                        if (xhr.status != 200 && xhr.getResponseHeader("content-type") != "application/json") {

                            if (continueInCaseOf3DSecureError) {
                                $("#ThreeDSServerTransID").val("");
                                return $("#checkout-form").submit();
                            }
                            else {
                                toastr["error"]('@(localizer.Get("ThreeDSError"))');
                                window.switchLoadingSpinner(false);
                                return;
                            }
                        }

                        if (data.errorMessage) {
                            if (continueInCaseOf3DSecureError || data.passThrough) {
                                $("#ThreeDSServerTransID").val("");
                                return $("#checkout-form").submit();
                            }
                            else {
                                toastr["error"](data.errorMessage);
                                window.switchLoadingSpinner(false);
                                return;
                            }
                        }

                        if (data.chalengeRequired) {
                            $("#ThreeDSServerTransID").val(data.threeDSServerTransID);

                            let container = document.getElementById('threeDSCReqIframeContainer');

                            nca3DSWebSDK.createIFrameAndInit3DSChallengeRequest(data.acsURL, data.base64EncodedChallengeRequest, '05', 'threeDSCReqIframe', container,
                                console.log('ChallengeRequest Iframe loaded, form created  and submitted'));
                            window.scrollTo(0, 0);
                            $('#threeDSCReqIframeContainer').slideFadeToggle();
                        } else {
                            window.switchLoadingSpinner(false);
                            return $("#checkout-form").submit();
                        }
                    },
                    error: function() {
                        if (continueInCaseOf3DSecureError)
                            return $("#checkout-form").submit();
                        else {
                            toastr["error"]('@(localizer.Get("ThreeDSError"))');
                            window.switchLoadingSpinner(false);
                            return;
                        }
                    },
                })
            }

            $("#submitbtn").on("click", function () {
                var pinPadDeal = document.getElementById("pin-pad-deal");
                if (pinPadDeal && pinPadDeal.checked == true) {
                    signalRClient.establishSignalRConnection().then(r => {
                        $("#checkout-form").submit();
                    }, e => {
                        $("#checkout-form").submit();
                    });
                }
                if ($("#CreditCardToken:checked").val()){
                    return $("#checkout-form").submit();
                }


                let payload = $('#checkout-form').serialize();
                window.switchLoadingSpinner(true);

                return $.post("/Home/Versioning3Ds", payload, function (data, status, xhr) {
                    if (xhr.status != 200 && xhr.getResponseHeader("content-type") != "application/json") {

                        if (continueInCaseOf3DSecureError)
                            return $("#checkout-form").submit();
                        else {
                            toastr["error"]('@(localizer.Get("ThreeDSError"))');
                            window.switchLoadingSpinner(false);
                            return;
                        }
                    }

                    if (data.errorMessage) {
                        if (continueInCaseOf3DSecureError || data.passThrough)
                            return $("#checkout-form").submit();
                        else {
                            toastr["error"](data.errorMessage);
                            window.switchLoadingSpinner(false);
                            return;
                        }
                    }

                    $("#ThreeDSServerTransID").val(data.threeDSServerTransID);
                    let container = document.getElementById('threeDSMethodIFrameContainer');

                    nca3DSWebSDK.createIframeAndInit3DSMethod(data.threeDSMethodUrl, data.threeDSMethodData, 'threeDSMethodIframe', container,
                        () => {
                            console.log('Iframe loaded, form created and submitted');
                        });

                    return authenticate3Ds();
                });
            })
        </text>
        }
        else if(Model.PaymentIntent != null && Model.AllowPinPad == true)
        {
        <text>
            $("#submitbtn").on("click", function (e) {
                e.preventDefault();
                if (!$("#checkout-form").valid()) {
                    return;
                }
                signalRClient.establishSignalRConnection().then(r => {
                    $("#checkout-form").submit();
                }, e => {
                    $("#checkout-form").submit();
                })
            })
        </text>
        }
        else
        {
        <text>
            $("#submitbtn").on("click", function () {
                $("#checkout-form").submit();
            })
        </text>
        }

        //$("#Amount").on("focus", function () {
        //    if ($("#SaveCreditCard").is(":checked")) {
        //        setTimeout(() => {
        //            $("span[data-valmsg-for=Amount]").html("");
        //            $("#Amount").removeClass("input-validation-error");
        //        }, 500)
        //    }
        //});

        //$("#Amount").on("input", function (e) {
        //    if ((!e.target.value || !Number(e.target.value)) && $("#SaveCreditCard").is(":checked")) {
        //        setTimeout(() => {
        //            $("span[data-valmsg-for=Amount]").html("");
        //            $("#Amount").removeClass("input-validation-error");
        //        }, 500)
        //    }
        //});

        //$("#SaveCreditCard").on("click", function (e) {
        //    if ($(e.target).is(":checked")) {
        //        $("span[data-valmsg-for=Amount]").html("");
        //        $("#Amount").removeClass("input-validation-error");
        //    }
        //})

        $("#checkout-form").on("submit", function (e) {

            //if (!Number($("#Amount").val()) && $("#SaveCreditCard").is(":checked")) {
            //    $("#amount-area").hide();
            //} else {
            //    $("#amount-area").show();
            //}
            if (!$("#checkout-form").valid()) {
                e.preventDefault();
                return;
            }
            let ccvaltrim = $("#cc-number").val().replace(/ /g, '');
                $("#cc-number").val(ccvaltrim);
            if (document.getElementById("ttype")) {
                if (document.getElementById("ttype").value == "@Shared.Integration.Models.TransactionTypeEnum.RegularDeal.ToString()" ||
                    document.getElementById("ttype").value == "@Shared.Integration.Models.TransactionTypeEnum.Immediate.ToString()") {
                    $("#installments-area").remove();
                    }
            }

            var pinPadDeal = document.getElementById("pin-pad-deal");
            if (pinPadDeal && pinPadDeal.checked == true) {
                $("#credit-card-info-area").remove();
            }

            window.switchLoadingSpinner(true);
        })

        window.onunload = function (e) {
            if (signalRClient) {
                signalRClient.disposeSignalRConnection();
            }
        };

        $("#number-of-payments").on("change", function (e) {
            let totalAmount = parseFloat( $("#Amount").val() || 0);
            let newAmount = Math.floor((totalAmount / e.target.value));
            let initialAmount = parseFloat((totalAmount - newAmount * (e.target.value - 1)).toFixed(2));

            $("#payment-amount").text(newAmount + "@Html.Raw(Model.Currency.GetCurrencySymbol())");
            $("#InstallmentPaymentAmount").val(newAmount)
            $("#initial-payment-amount").val(initialAmount);

            $("#total-amount").text(totalAmount.toFixed(2) + "@Html.Raw(Model.Currency.GetCurrencySymbol())")
        });

        $("#initial-payment-amount").on("input", function (e) {
            let self = this;
            if (self.ipaTimeout) {
                clearTimeout(self.ipaTimeout);
            }
            self.ipaTimeout = setTimeout(() => {
                let totalAmount = $("#Amount").val();
                if (!Number(totalAmount)) {
                    $("#initial-payment-amount").val(0);
                    return;
                }

                let numOfPayments = parseInt($("#number-of-payments").val());
                let val = parseFloat(e.target.value);
                let max = parseFloat(e.target.getAttribute("max"));

                if (val > max || val == max) {
                    val = e.target.value = totalAmount - 0.1 * numOfPayments;
                }

                let newAmount = (totalAmount - val) / (numOfPayments - 1);
                let initialAmount = parseFloat((totalAmount - newAmount * (numOfPayments - 1)).toFixed(2));

                //console.log(totalAmount, numOfPayments, val, newAmount, initialAmount)

                let installmentAmountRounded = parseFloat(newAmount.toFixed(2))
                $("#InstallmentPaymentAmount").val(installmentAmountRounded)
                $("#payment-amount").text(installmentAmountRounded + "@Html.Raw(Model.Currency.GetCurrencySymbol())");
                $("#initial-payment-amount").val();

            }, 1000);
        });

        $("#Amount").on('input', function (e) {
            $("#number-of-payments").trigger("change");
            let numOfPayments = parseInt($("#number-of-payments").val());
            $("#initial-payment-amount").attr("max", (e.target.value - 0.1 * numOfPayments).toFixed(2));
        })

        $("#ttype").on("change", function (e) {
            let value = e.target.value;
            let min = 0; let max = 0;
            let totalAmountDisplay = document.getElementById("total-amount-display");
            let installmentsArea = document.getElementById("installments-area");

            if (value == "@Shared.Integration.Models.TransactionTypeEnum.Installments.ToString()") {
                min = @(Model.MinInstallments ?? 2);
                max = @(Model.MaxInstallments ?? 12);
            }
            else if (value == "@Shared.Integration.Models.TransactionTypeEnum.Credit.ToString()") {
                min = @(Model.MinCreditInstallments ?? 3);
                max = @(Model.MaxCreditInstallments ?? 12);
            }
            else {
                if (totalAmountDisplay) {
                    totalAmountDisplay.hidden = false;
                }
                if (installmentsArea) {
                    installmentsArea.hidden = true;
                }
                return;
            }

            var select = document.getElementById("number-of-payments");
            select.length = 0;
            for (var i = min; i <= max; i++) {
                select.options.add(new Option(i, i))
            }

            $("#number-of-payments").trigger("change");
            if (totalAmountDisplay) {
                totalAmountDisplay.hidden = true;
            }
            if (installmentsArea) {
                installmentsArea.hidden = false;
            }
        })

        $("#pin-pad-deal").on("change", function (e) {
            document.getElementById("credit-card-info-area").hidden = e.target.checked;
            document.getElementById("pin-pad-devices").hidden = !e.target.checked;
        })
        $("#pin-pad-deal").trigger("change");
        $("#number-of-payments").trigger("change");

        @if (Model.SavedTokens?.Any() == true)
        {
        <text>
            let tokens = @Json.Serialize(Model.SavedTokens);
            let cardNumberToBin = function(val){
                if (!val){ return false;}
                try{
                val = val.replace(/\s/g, "");
                return val.substring(0, 6) + '****' + val.substring(val.length - 4, val.length)
                }catch { return null; }
            };
            var checkLuhn = function (cardNo) {
                if (cardNo.length == 9)
                    return true;
                var s = 0;
                var doubleDigit = false;
                for (var i = cardNo.length - 1; i >= 0; i--) {
                    var digit = +cardNo[i];
                    if (doubleDigit) {
                        digit *= 2;
                        if (digit > 9)
                            digit -= 9;
                    }
                    s += digit;
                    doubleDigit = !doubleDigit;
                }
                return s % 10 == 0;
            };
            var validateCardNo = function (no) {
                return (no && checkLuhn(no) &&
                    no.length == 16 && (no[0] == 4 || no[0] == 5 && no[1] >= 1 && no[1] <= 5 ||
                    (no.indexOf("6011") == 0 || no.indexOf("65") == 0)) ||
                    no.length == 15 && (no.indexOf("34") == 0 || no.indexOf("37") == 0) ||
                    no.length == 13 && no[0] == 4)
            };
            var checkDiarect = function(no) {
                return (no.length === 9);
            };
            $("#cc-number").on("input", function (e) {
                let rawVal = e.target.value.split(' ').join('');
                if(!validateCardNo(rawVal) && !checkDiarect(rawVal)){
                    $("#cc-added-warn").attr('hidden', true);
                    return;
                }
                let toBin = cardNumberToBin(rawVal);
                if(!toBin){
                    $("#cc-added-warn").attr('hidden', true);
                    return;
                }
                let presence = tokens.reduce((acc, e) => {
                    if(acc){ return acc;}
                    acc += e.value ? (e.value.split(' ')[0] == toBin ? 1 : 0) : 0;
                    return acc;
                }, 0);

                $("#cc-added-warn").attr('hidden', !presence);
            });
        </text>
        }
    })})()
</script>
