@using Shared.Helpers
@model ChargeViewModel
@inject CommonLocalizationService localizer


<form asp-action="BitPaymentCompleted" method="get" hidden id="bit-completed-form">
    <input type="hidden" name="PaymentTransactionID" id="PaymentTransactionID" />
    <input type="hidden" name="TransactionSerialId" id="TransactionSerialId" />
    <input type="hidden" name="PaymentInitiationId" id="PaymentInitiationId" />
</form>

<form asp-action="Charge" method="post" id="bit-form">
    <input type="hidden" asp-for="RedirectUrl" id="Bit_RedirectUrl" />
    <input type="hidden" asp-for="PaymentRequest" id="Bit_PaymentRequest" />
    <input type="hidden" asp-for="PaymentIntent" id="Bit_PaymentIntent" />
    <input type="hidden" asp-for="ApiKey" id="Bit_ApiKey" />
    <input type="hidden" asp-for="Currency" id="Bit_Currency" />
    <input type="hidden" asp-for="Description" id="Bit_Description" />
    <input type="hidden" asp-for="IssueInvoice" id="Bit_IssueInvoice" />
    <input type="hidden" asp-for="PayWithBit" id="PayWithBit" />


    @if (Model.Amount.GetValueOrDefault() > 0 && !Model.UserAmount)
    {
        <input type="hidden" asp-for="Amount" id="Bit_Amount" />

        <h3 id="total-amount-display" hidden="@(Model.TransactionType != Shared.Integration.Models.TransactionTypeEnum.RegularDeal)" class="panel-title text-center @(Model.IsRefund ? "text-danger" : "")">
            @(Model.IsRefund ? localizer.Get("Refund") : localizer.Get("TotalSum")): @Model.Amount.GetValueOrDefault().ToString("F2")@Model.Currency.GetCurrencySymbol()
        </h3>
    }

    @if (Model.UserAmount)
    {
        <fieldset class="border rounded p-2 m-2" id="amount-area">
            @if (Model.UserAmount)
            {
                <div class="form-group row">
                    <label asp-for="Amount" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("TotalSum") (@Model.Currency.GetCurrencySymbol())</label>
                    <div class="col-sm-9">
                        <input id="Bit_Amount" type="number" step="0.01" class="form-control form-control-sm" placeholder="@localizer.Get("TotalSum")" asp-for="Amount" autocomplete="off">
                        <span asp-validation-for="Amount"></span>
                    </div>
                </div>
            }
        </fieldset>
    }
    <fieldset class="border rounded p-2 m-2">
        <div class="form-group row">
            <label asp-for="Name" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("CardOwnerName")</label>
            <div class="col-sm-9">
                <input class="form-control form-control-sm" placeholder="@localizer.Get("CardOwnerName")" asp-for="Name" id="Bit_Name" autocomplete="off">
                <span asp-validation-for="Name"></span>
            </div>
        </div>
        <div class="form-group row">
            <label asp-for="Email" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("Email")</label>
            <div class="col-sm-9">
                <input type="email" class="form-control form-control-sm" placeholder="@localizer.Get("Email")" asp-for="Email" id="Bit_Email" autocomplete="off">
                <span asp-validation-for="Email"></span>
            </div>
        </div>
        <div class="form-group row">
            <label asp-for="NationalID" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("NationalID")</label>
            <div class="col-sm-9">
                <input type="tel" class="form-control form-control-sm" placeholder="@localizer.Get("NationalID")" asp-for="NationalID" id="Bit_NationalID" autocomplete="off">
                <span asp-validation-for="NationalID"></span>
            </div>
        </div>
        <div class="form-group row">
            <label asp-for="Phone" class="col-sm-3 col-form-label col-form-label-sm">@localizer.Get("Phone")</label>
            <div class="col-sm-9">
                <input type="tel" class="form-control form-control-sm" placeholder="@localizer.Get("Phone")" asp-for="Phone" id="Bit_Phone" autocomplete="off">
                <span asp-validation-for="Phone"></span>
            </div>
        </div>
    </fieldset>

    <div class="form-group d-flex justify-content-end">
        <button class="btn btn-outline-danger mx-1" id="bit-cancel-btn">
            @localizer.Get("CancelPayment")
        </button>
        <button class="btn btn-secondary mx-1" type="button" id="paywithbit">
            <img height="20px" src="~/img/bit-logo-white.svg" />
            @localizer.Get("PayWithBit")
        </button>
    </div>
</form>

<div id="bit-payment-area" hidden class="row justify-content-center">
    <div class="col-md-12">
        <h3 class="text-center">@localizer.Get("BitPayment")</h3>
    </div>

    <div class="col-md-6">
        <div id="bitcom-button-container"></div>
    </div>
</div>

<script nws-csp-add-nonce="true">
    document.addEventListener("DOMContentLoaded", function() {
        let amt = parseFloat($("#Bit_Amount").val());
        if (!amt) {
            $("#Bit_Amount").val(amt.toFixed(2))
        }

        $("#bit-cancel-btn").on('click', function (e) {
            e.preventDefault();
            $('#cancel-form').submit();
        });

        $("#paywithbit").on("click", function (e) {
            e.preventDefault();
            if (!$("#bit-form").valid()) {
                return;
            }
            $("#PayWithBit").val(true);
            initiateBit();
        })

        let initiateBit = function(){
            if (!$("#bit-form").valid()) {
                e.preventDefault();
                return;
            }

            //extend bit completed form with every field of bit form
            $("#bit-completed-form").append($("#bit-form").html());

            let payload = $('#bit-form').serializeArray().reduce(function(obj, item) {
                obj[item.name] = item.value;
                return obj;
            }, {});

            document.getElementById("loading-spinner").hidden = false;
            document.getElementsByTagName("body")[0].classList.add("no-scroll");

            let url = $("#bit-form").attr('action');
            $.post(url, payload, function(data,status,xhr){
                if(xhr.status != 200 && xhr.getResponseHeader("content-type") != "application/json"){ //to display error, re-render the page
                    return ("#bit-form").submit();
                }

                if(data.mobileRedirectUrl){ //mobile devices only
                    return location.href = data.mobileRedirectUrl;
                }

                $("#PaymentTransactionID").val(data.paymentTransactionID);
                $("#TransactionSerialId").val(data.transactionSerialId);
                $("#PaymentInitiationId").val(data.paymentInitiationId);

                document.getElementById("loading-spinner").hidden = true;
                document.getElementsByTagName("body")[0].classList.remove("no-scroll")
                $("#bit-payment-area").attr('hidden', false);
                $("#bit-form").attr('hidden', true);
                $("#payment-type-area").attr('hidden', true);

                let transaction = {
                    transactionSerialId: data.transactionSerialId,
                    paymentInitiationId: data.paymentInitiationId,
                };
                BitPayment.pay(transaction);
                BitPayment.Buttons({
                    onCreate: function(openBitPaymentPage){
                        openBitPaymentPage(transaction);
                    },
                    onApproved: function(details){
                        $("#bit-completed-form").submit();
                    }
                }).render('#bitcom-button-container');
            });
        };

        //$("#bit-form").on("submit", function (e) {
        //    if (!$("#bit-form").valid()) {
        //        e.preventDefault();
        //        return;
        //    }

        //    document.getElementById("loading-spinner").hidden = false;
        //    document.getElementsByTagName("body")[0].classList.add("no-scroll")
        //})
    });
</script>
